<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[二叉树学习与实现(Binary Search Tree)]]></title>
      <url>/2017/08/10/2017-Aug-bst/</url>
      <content type="html"><![CDATA[<p>二叉树，也叫二叉搜索树，是经典的数据结构。大学的时候没有好好学，没想到天朝面试对数据结构和算法这一块情有独钟，于是不得不重温一下这些知识。在Udemy上报了一个课程，几堂课看下来觉得数据结构还是很有意思，很值得推敲的。<br><a id="more"></a></p>
<h3 id="1-二叉树的基本原理"><a href="#1-二叉树的基本原理" class="headerlink" title="1 二叉树的基本原理"></a>1 二叉树的基本原理</h3><p><img src="bst_structure.png" alt="二叉树的结构"></p>
<h4 id="1-1-二叉树的基本术语"><a href="#1-1-二叉树的基本术语" class="headerlink" title="1.1 二叉树的基本术语"></a>1.1 二叉树的基本术语</h4><ul>
<li>如图二叉树就是最多有两个儿子（children）的节点（node）这有点儿像现在的二胎政策。</li>
<li>这两个儿子通常被称为左节点（left node）和右节点（right node）。</li>
<li>没有爹的节点叫做根节点，因为它是最先插入的节点，后续插入的数据以根节点为起点插入。</li>
<li>没有儿子的节点叫做叶节点（leave node），它们处于二叉树每条分支往下可到达的边缘处。</li>
<li>每个节都有自己的身家（data），二叉树根据身价的大小来决定此节点放置的位置。</li>
<li>身价小于当前节点放置于左，否则（身价大于等于当前节点）的放置于右。</li>
<li>二叉树也有身高（叫做深度depth）根节点不算身高（depth = 0）往下每叠加一层，身高加上1。</li>
<li>除叶节点以外所有的节点都有两个儿子，这个二叉树为<em>满二叉树</em>。</li>
<li>除最后一层以外，所有的节点都有两个儿子，这个二叉树为<em>完全二叉树</em>。</li>
</ul>
<h4 id="1-2-二叉树与普通树的区别："><a href="#1-2-二叉树与普通树的区别：" class="headerlink" title="1.2 二叉树与普通树的区别："></a>1.2 二叉树与普通树的区别：</h4><p>第一个区别关于度：</p>
<ul>
<li>度（degree）是树结构中表示节点间关系的单位，通俗点说就是一个节点有几个儿子。</li>
<li><em>节点的度（degree of node）</em>指的是节点拥子树的个数。</li>
<li><em>树的度（degree of tree）</em>我的理解是跟节点一共拥有几个儿子。</li>
<li>普通树中节点的最大度数没有限制，然而二叉树节点的最大度为2（所以每个节点只有两个儿子）。</li>
</ul>
<p>第二个区别是顺序：</p>
<ul>
<li>无序树的节点无左右之分，而二叉树的节点有左右之分，因此二叉树是有序树。</li>
</ul>
<h3 id="2-二叉树的功能／特性"><a href="#2-二叉树的功能／特性" class="headerlink" title="2 二叉树的功能／特性"></a>2 二叉树的功能／特性</h3><ul>
<li>遍历（traverse）：根据相应的顺序递归遍历二叉树的所有节点</li>
<li>插入（insert）：根据数据的大小从根节点开始插入数据</li>
<li>删除（delete）：删除拥有相应数据的节点</li>
<li>最大值（max）：找出二叉树中的最大值</li>
<li>最小值（min）：找出二叉树中的最小值</li>
</ul>
<h4 id="2-1-二叉树的遍历"><a href="#2-1-二叉树的遍历" class="headerlink" title="2.1 二叉树的遍历"></a>2.1 二叉树的遍历</h4><ul>
<li>分为先序遍历（pre-order traversal）、中序遍历（in-order traversal）和后续遍历（post-order traversal）</li>
<li>先序遍历：先老子（访问跟节点），然后左儿子（先序遍历左子树），最后右儿子（先序遍历右子树）</li>
<li>中序遍历：先左儿子（中序遍历左子树），然后老子（访问跟节点），最后右儿子（中序遍历右子树）</li>
<li>后续遍历：先左儿子（中序遍历左子树），然后右儿子（中序遍历右子树），最后老子（访问根节点）</li>
</ul>
<p><img src="bst_traversal.png" alt="二叉树遍历例子"></p>
<ul>
<li><p>用上图为例，三种遍历的结果为： </p>
<pre>
  先序遍历：6，3，2，1，4，7，8
  中序遍历：1，2，3，4，6，7，8
  后序遍历：1，2，4，3，8，7，6
</pre>
</li>
<li><p>二叉树的遍历有什么意义呢？</p>
</li>
<li>根据知乎上的回答：先序可以很方便地形成一条搜索路径，中序遍历BST的时候可以得到一个有序序列，后序可以用来计算一颗算数表达式树。</li>
<li>根据上面的例子反馈<strong>中序遍历</strong>最容易看出来，便是根据二叉树数据结构中自动排序的特点，以节点的大小顺序遍历二叉树。<strong>先序遍历</strong>是以类似于深度优先的方式从左子树到右子树遍历二叉树的每一个节点。<strong>后序遍历</strong>的特点符合普通数学算数式的特点，左右两个子节点存放值或者子算数式，根节点和每一个父节点储存算术表达式（如+，-，*，／）这样通过一次后序遍历就可以算出算术表达式的值。</li>
</ul>
<h4 id="2-2-二叉树的插入"><a href="#2-2-二叉树的插入" class="headerlink" title="2.2 二叉树的插入"></a>2.2 二叉树的插入</h4><ul>
<li>二叉树在执行插入的时候，新的节点只能存放在位置为空的地方。</li>
<li>然后根据二叉树的基本原理，比当前节点小的放置在左子节点处，反之放置在右节点处。</li>
</ul>
<p><img src="bst_insert.png" alt="二叉树插入例子"></p>
<p>如上图所示，我们先插入一个值为1的节点，根节点是6（非空）所以要对插入节点的值与根节点的值来决定新插入的节点要放在根节点的左子树还是右子树中。根据二叉树左小右大的基本原理节点1要放在右子树，但是右子树已经有了节点2（非空），那需要继续对比节点的值来决定节点1插入的位置。直到即将插入的位置为空时插入过程才结束。经过对比节点1应该插入到节点2的左节点处。同理，节点4应该插入到节点2的右节点处。</p>
<h4 id="2-3-二叉树的删除"><a href="#2-3-二叉树的删除" class="headerlink" title="2.3 二叉树的删除"></a>2.3 二叉树的删除</h4><p>二叉树的删除有三种情况：</p>
<p><img src="bst_delete_1.png" alt="删除没有儿子的节点"></p>
<p><em>情况一：</em>删除的节点没有儿子，我们直接将此节点删除（设为null）</p>
<p><img src="bst_delete_2.png" alt="删除有一个儿子的节点"></p>
<p><em>情况二：</em> 删除的节点有一个儿子，我们首先要把它的孩子过继给他的父节点，然后再将其删除</p>
<p><img src="bst_delete_3.png" alt="删除有两个儿子的节点"></p>
<p><em>情况三：</em>删除的节点有两个儿子，我们首先将此节点与他的successor或predecessor的数据（data）互换，然后删掉它的successor或predecessor。successor指的是删除节点左节点树中最大的节点。而predecessor指的是删除节点又节点树中最小的节点。</p>
<h4 id="2-4-二叉树的最大值和最小值"><a href="#2-4-二叉树的最大值和最小值" class="headerlink" title="2.4 二叉树的最大值和最小值"></a>2.4 二叉树的最大值和最小值</h4><p>根据二叉树的特点：</p>
<ul>
<li>二叉树的最小值总是处于树的最左侧</li>
<li>二叉树的最大值总是处于树的最右侧</li>
</ul>
<h3 id="为什么使用二叉树？"><a href="#为什么使用二叉树？" class="headerlink" title="为什么使用二叉树？"></a>为什么使用二叉树？</h3><ul>
<li>二叉树在执行插入时就已经进行了排序，不需要额外的算法去执行排序。</li>
<li>二叉树在平衡的状态下的增删查减的时间复杂度都为O(log(n))/O(log2(n)，效率很不错哦。至于为什么是相对平衡的状态下表现才好呢？假设你有一个二叉树，你依次插入数据为1，2，3，4的节点，那么此二叉树的形状跟一个链表（link list）是一样的。如果我们要查找一个数据，我们需要遍历整个二叉树，如果我们有N个节点，它的时间复杂度就变成了O(n)。根据链表的结构特点，在执行插入和删除动作的时候，它的时间复杂度为O(1)。那么二叉树在平衡状态下为什么又是O(log(n))呢？我们想象一下，当一个二叉树平衡分布的时候，根据二叉树的排列特点我们对其进行相应的增删查动作时，都只需要遍历一半（想想二分法）因为遍历节点的数量与总节点的规模n的比例为log2(n)，所以其时间复杂度也为log2(n)。（看来我还需要研究一下时间复杂度）</li>
</ul>
<h3 id="二叉树的性能总结"><a href="#二叉树的性能总结" class="headerlink" title="二叉树的性能总结"></a>二叉树的性能总结</h3><h4 id="Average-Case"><a href="#Average-Case" class="headerlink" title="Average Case"></a>Average Case</h4><table>
<thead>
<tr>
<th style="text-align:center">Access</th>
<th style="text-align:center">Search</th>
<th style="text-align:center">Insert</th>
<th style="text-align:center">Delete</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">O(log(n)</td>
<td style="text-align:center">O(log(n)</td>
<td style="text-align:center">O(log(n)</td>
<td style="text-align:center">O(log(n)</td>
</tr>
</tbody>
</table>
<h4 id="Worse-Case"><a href="#Worse-Case" class="headerlink" title="Worse Case"></a>Worse Case</h4><table>
<thead>
<tr>
<th style="text-align:center">Access</th>
<th style="text-align:center">Search</th>
<th style="text-align:center">Insert</th>
<th style="text-align:center">Delete</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<h3 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h3><p><img src="bst_uml.png" alt="BST实现类图"></p>
<ul>
<li>Tree 接口：定义树的基本功能／特性，包括遍历、增、删、查、最大／最小值。</li>
<li>Node 类：定义每一个节点所具备的属性，如数据、左节点、右节点。</li>
<li>BinarySearchTree 类：继承Tree接口，对二叉树的每个功能进行具体实现。</li>
<li>App 类：测试类。</li>
</ul>
<p>(to be continue)</p>
]]></content>
      
        
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于异常的思考]]></title>
      <url>/2017/07/30/2017-Jul-think-in-exception/</url>
      <content type="html"><![CDATA[<blockquote>
<p>异常，让程序有更好的容错性，并分离了错误处理代码与逻辑实现代码</p>
</blockquote>
<h3 id="异常处理的目的："><a href="#异常处理的目的：" class="headerlink" title="异常处理的目的："></a>异常处理的目的：</h3><ul>
<li>使程序代码混乱最小化</li>
<li>捕获保留异常讯息</li>
<li>通知合适的人员处理相应异常</li>
<li>采用合适的方式结束异常活动<a id="more"></a>
</li>
</ul>
<h3 id="异常处理的使用规范："><a href="#异常处理的使用规范：" class="headerlink" title="异常处理的使用规范："></a>异常处理的使用规范：</h3><ul>
<li><p>先小后大，先处理子类异常，在处理父类异常。</p>
</li>
<li><p>异常代码结构：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="comment">//逻辑实现代码</span></div><div class="line">&#125; <span class="keyword">catch</span>(ExceptionName e) &#123;</div><div class="line">	<span class="comment">//异常处理代码</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	<span class="comment">//回收被打开的物理资源，如数据库连接、网络连接、读取磁盘文件等。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>增强try 代码结构：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(</div><div class="line">	<span class="comment">//资源调用代码，运行完try块后自动关闭资源</span></div><div class="line">) &#123;</div><div class="line">	<span class="comment">//逻辑实现代码</span></div><div class="line">&#125; <span class="keyword">catch</span>(ExceptionName e) &#123;</div><div class="line">	<span class="comment">//异常处理代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>增强try的好处是省略了finally块来处理需要关闭的资源，在try里的资源会在try块运行结束或捕获异常后关闭。</p>
<ul>
<li>异常结构使用总结：</li>
</ul>
<pre>
try 警官专抓异常
出行带着catch 探员和finally 探员
catch 探员负责定罪
finally 探员负责善后
catch finally 有时齐出动
有时带其中一个便够
两个都不带也行
函数签名带上throws
增强 try警官很好用
自带finally 防疏漏
</pre>

<h3 id="不要滥用异常："><a href="#不要滥用异常：" class="headerlink" title="不要滥用异常："></a>不要滥用异常：</h3><ul>
<li>别try 普通的业务代码（不会抛出异常的代码）</li>
<li>别用try 取代负责业务逻辑的if 和 else 小兄弟。（杀鸡用牛刀：异常的性能比if else 差）</li>
<li>别把try 块踹成一个胖子（避免使用庞大的try块）</li>
<li>不要乱抓人！（尽量不要使用catch all语句）</li>
</ul>
<p>（以下参考王垠的<a href="http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy" target="_blank" rel="external">编程的智慧</a>，非常好的一篇文章 和 《疯狂Java讲义》第十章关于异常处理)</p>
<h3 id="正确使用异常："><a href="#正确使用异常：" class="headerlink" title="正确使用异常："></a>正确使用异常：</h3><ol>
<li>道不同不相为谋，异常要各try 各的(不同的异常情况要分开try，不要潦草的用一个Exception捕获所有异常）</li>
<li>抓我要有明确证据（尽量减少try 块的内容，尽量分离与异常无关的代码）</li>
<li>抓我就要对我负责啊（调试的时候print 异常，调试完毕后要对异常进行相应处理</li>
<li>抓我也得选对地方吧（在合理的Layer 处理异常）</li>
<li>不要把我丢给不相关的人（在需要的地方进行异常转译）</li>
</ol>
<h3 id="案例分析："><a href="#案例分析：" class="headerlink" title="案例分析："></a>案例分析：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Properties p = Properties();	</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	p.load(<span class="keyword">new</span> FileInputStream(<span class="string">"sql_config.txt"</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">String drv = p.getProperty(<span class="string">"drv"</span>);</div><div class="line">String url = p.getProperty(<span class="string">"url"</span>);</div><div class="line">String usr = p.getProperty(<span class="string">"usr"</span>);</div><div class="line">String pwd = p.getProperty(<span class="string">"pwd"</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	Class.forName(drv);</div><div class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子示范了JDBC 数据库的连接过程，此处有不同的异常情况，第一个try 块里检测的是有没有<code>sql_config.txt</code>这个文件，第二个try 块里检测了程序是否成功加载了SQL 驱动，第三个try 块检测了是否通过DriverManager 成功生成了Connection 实例。三个try 块分别检测了不同的异常类型，这样才达到了捕获异常的目的。千万不要用Exception 来捕获所有的异常，因为Exception 是所有异常的父类，如果一有任何异常出现就会抛出异常，而不会按代码想要catch 的异常类型检查相应异常，于是难以定位异常发生的地点以及类型，便也失去了使用异常的意义）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Properties p = Properties();	</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	p.load(<span class="keyword">new</span> FileInputStream(<span class="string">"sql_config.txt"</span>);</div><div class="line"></div><div class="line">	<span class="comment">//业务代码没有分离</span></div><div class="line">	String drv = p.getProperty(<span class="string">"drv"</span>);</div><div class="line">	String url = p.getProperty(<span class="string">"url"</span>);</div><div class="line">	String usr = p.getProperty(<span class="string">"usr"</span>);</div><div class="line">	String pwd = p.getProperty(<span class="string">"pwd"</span>);</div><div class="line"></div><div class="line">	Class.forName(drv);</div><div class="line"></div><div class="line">	Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line"></div><div class="line"><span class="comment">//捕获多个异常</span></div><div class="line">&#125; <span class="keyword">catch</span>(IOException e1) &#123;</div><div class="line">	e1.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException e2) &#123;</div><div class="line">	e2.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span>(SQLException e3) &#123;</div><div class="line">	e3.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子把三个try 块的内容放在一起，用catch 来捕获多个异常。这里有一部分的业务代码被放置在try 块里面，没有做到分离普通的业务代码和可能出现异常的代码，有碍迅速定位异常的位置。捕获多个异常的原理是如果try 块出现异常，运行时环境会将异常与catch 块中的异常类型逐一比较，最后抛出相应的异常类型。抛出多个异常的方法在程序不是特别复杂的情况下可以使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Properties p = Properties();	</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	p.load(<span class="keyword">new</span> FileInputStream(<span class="string">"sql_config.txt"</span>);</div><div class="line"></div><div class="line">	<span class="comment">//业务代码没有分离</span></div><div class="line">	String drv = p.getProperty(<span class="string">"drv"</span>);</div><div class="line">	String url = p.getProperty(<span class="string">"url"</span>);</div><div class="line">	String usr = p.getProperty(<span class="string">"usr"</span>);</div><div class="line">	String pwd = p.getProperty(<span class="string">"pwd"</span>);</div><div class="line"></div><div class="line">	Class.forName(drv);</div><div class="line"></div><div class="line">	Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line"></div><div class="line"><span class="comment">//捕获多个异常</span></div><div class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">	<span class="comment">//不处理异常</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码有两个问题，一是没有对要捕获的异常类型进行明确的分类检查，这样会难以定位异常。第二点是没有对异常进行任何处理，如果发生任何异常并不进行任何处理，会极度影响系统调试，也会为系统安全和代码健壮性埋下隐患。在代码调试的阶段可以使用<code>printStackTrace()</code>通过打印异常栈来debug。但是当程序完成后，要对相应的异常进行具体处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//use isValidInput function to validate user input</span></div><div class="line">	String loginQuery = <span class="string">"select * from Users where username=? and password=?"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Connection conn = getConnection(); </div><div class="line">		PreparedStatement pstmt = conn.prepareStatement(loginQuery);</div><div class="line">		ResultSet rs = pstmt.executeQuery();</div><div class="line">		pstmt.setString(<span class="number">1</span>, username);</div><div class="line">		pstmt.setString(<span class="number">2</span>, password);</div><div class="line"></div><div class="line">		<span class="comment">//找到相应用户</span></div><div class="line">		<span class="keyword">if</span>(rs.next()) &#123;</div><div class="line">			<span class="comment">//转到用户界面</span></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		<span class="comment">//具体异常处理：通过弹出提示窗给用户</span></div><div class="line">		JOptionPane.showMessageDialog(<span class="keyword">new</span> JFrame()</div><div class="line">				, <span class="string">"incorrect username/password"</span></div><div class="line">				, <span class="string">"login error"</span></div><div class="line">				, JOptionPane.ERROR_MESSAGE);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		pstmt.close();</div><div class="line">		conn.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码为捕获的异常进行了具体的处理，通过弹出错误窗口的方式提醒用户操作失败。</p>
]]></content>
      
        <categories>
            
            <category> Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Mac中用pathogen和Git管理Vim插件]]></title>
      <url>/2017/07/22/2017-Jul-pathogen-github-vim/</url>
      <content type="html"><![CDATA[<p>当你的Vim命令比较熟了，你总是想尝试一些新的东西。折腾各种各样的Vim插件便成了那几天最愉快的消遣。Vim就好像一个充满各种插口的超级玩具，你总能组合出属于自己的那款。但有时候不得不说在配置Vim的时候的时间开销是很大的。所以使用Git这样的工具来托管你的Vim插件是一个很好的选择。Vim的插件管理方案有许多，比如<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="external">pathogen</a>和<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a>。我选择了pathogen，因为恰巧先读了一片关于用pathogen配置Vim的文章罢了，好了废话少说，我们进入主题。</p>
<h3 id="第一步：安装pathogen"><a href="#第一步：安装pathogen" class="headerlink" title="第一步：安装pathogen"></a>第一步：安装pathogen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; \</div><div class="line">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</div></pre></td></tr></table></figure>
<p>上面的代码会在你的跟目录创建一个<code>.vim/</code>文件夹，并在里面创建相应的文件夹：<code>autoload/</code>和<code>bundle/</code>最后在<code>autoload/</code>文件夹中下载pathogen的配置文件<code>pathogen.vim</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">execute pathogen#infect()</div></pre></td></tr></table></figure>
<p>然后，将上面的代码加到你的Vim配置文件<code>.vimrc</code>里。如果是第一次倒腾Vim插件你需要在根目录创建一个<code>.vimrc</code>。下面是我的Vim配置文件：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"切换文字的encode格式，防止中文乱码</span></div><div class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,ucs-bom,gb18030,gbk,gb2312,cp936</div><div class="line"><span class="keyword">set</span> termencoding=utf-<span class="number">8</span></div><div class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment">"语法高亮</span></div><div class="line"><span class="keyword">syntax</span> enable</div><div class="line"><span class="comment">"显示行数</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">nu</span></div><div class="line"><span class="comment">"设置tab大小为4个空格</span></div><div class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></div><div class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></div><div class="line"><span class="comment">"显示相对行数</span></div><div class="line"><span class="keyword">set</span> rnu</div><div class="line"><span class="comment">"允许使用鼠标</span></div><div class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span> <span class="comment">"enable mouse support</span></div><div class="line"></div><div class="line"><span class="comment">"设置pathogen Runtime</span></div><div class="line"><span class="keyword">runtime</span> bundle/<span class="keyword">vim</span>-pathogen.git/autoload/pathogen.<span class="keyword">vim</span></div><div class="line"><span class="keyword">execute</span> pathogen#infect()</div><div class="line"></div><div class="line"><span class="comment">"sensible 插件启用（需要先把sensible插件下载到bundle文件夹内</span></div><div class="line">runtime! plugin/sensible.<span class="keyword">vim</span></div><div class="line"></div><div class="line"><span class="comment">"检查文件格式并根据文件格式缩进</span></div><div class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span></div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div><div class="line"></div><div class="line"><span class="comment">"set 配置默认的python缩紧</span></div><div class="line"><span class="keyword">augroup</span> python_files </div><div class="line">	autocmd!  </div><div class="line">	<span class="keyword">autocmd</span> FileType <span class="keyword">python</span> <span class="keyword">setlocal</span> noexpandtab </div><div class="line">	<span class="keyword">autocmd</span> FileType <span class="keyword">python</span> <span class="keyword">set</span> tabstop=<span class="number">4</span> </div><div class="line">	<span class="keyword">autocmd</span> FileType <span class="keyword">python</span> <span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></div><div class="line"><span class="keyword">augroup</span> END</div><div class="line"></div><div class="line"><span class="comment">"配置主题</span></div><div class="line"><span class="keyword">colorscheme</span> twilight256</div><div class="line"></div><div class="line"><span class="comment">"设置tagbar插件的快捷键（需要先安装tagbar插件）</span></div><div class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F8&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="comment">"set the initial width of the tagbar</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_width</span>=<span class="number">25</span> </div><div class="line"></div><div class="line"><span class="comment">"配置NerdTree插件（需要先安装NerdTree插件和使用homebrew安装ctags）</span></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F9&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">let</span> NERDTreeIgnore=[<span class="string">'.class'</span>] <span class="comment">"avoid java class file display in nerdtree</span></div><div class="line"></div><div class="line"><span class="comment">"配置syntastic插件（需要先安装syntastic插件）</span></div><div class="line"><span class="keyword">set</span> statusline+=%#warningmsg#</div><div class="line"><span class="keyword">set</span> statusline+=%&#123;SyntasticStatuslineFlag()&#125;</div><div class="line"><span class="keyword">set</span> statusline+=%*</div><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_always_populate_loc_list</span> = <span class="number">1</span></div><div class="line"><span class="comment">"let g:syntastic_auto_loc_list = 1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_open</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_wq</span> = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">"配置 ctr-p 菜单颜色</span></div><div class="line"><span class="keyword">hi</span> Pmenu        ctermfg=<span class="number">38</span>     ctermbg=<span class="number">235</span>   cterm=None <span class="string">""</span>font</div><div class="line"><span class="keyword">hi</span> PmenuSel     ctermfg=<span class="number">7</span>      ctermbg=<span class="number">235</span>   cterm=Bold <span class="string">""</span>selection</div><div class="line"><span class="keyword">hi</span> PmenuSbar    ctermfg=<span class="number">248</span>    ctermbg=<span class="number">242</span>   cterm=Bold <span class="string">""</span>scorll bar space</div><div class="line"><span class="keyword">hi</span> PmenuThumb   ctermfg=<span class="number">248</span>    ctermbg=<span class="number">7</span>     cterm=None <span class="string">""</span>scorll bar</div><div class="line"></div><div class="line"><span class="comment">"一些快捷键配置</span></div><div class="line"><span class="keyword">let</span> mapleader = <span class="string">"\&lt;Space&gt;"</span></div><div class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>t :TagbarToggle<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>n :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>[ :<span class="keyword">bp</span><span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>] :<span class="keyword">bn</span><span class="symbol">&lt;CR&gt;</span></div><div class="line"></div><div class="line"><span class="comment">"配置Dash插件（需要安装Dash插件）</span></div><div class="line">:<span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>d :Dash<span class="symbol">&lt;CR&gt;</span></div><div class="line"></div><div class="line"><span class="comment">"配置airline主题</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#enabled = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#left_sep = <span class="string">' '</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#left_alt_sep = <span class="string">'|'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline_powerline_fonts</span> = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">"配置markdown-preview (需要安装mardown-preview插件和使用homebrew安装grip）</span></div><div class="line"><span class="keyword">let</span> vim_markdown_preview_github=<span class="number">1</span></div><div class="line"><span class="keyword">let</span> vim_markdown_preview_browser=<span class="string">'Google Chrome'</span></div><div class="line"><span class="keyword">let</span> vim_markdown_preview_hotkey=<span class="string">'&lt;C-m&gt;'</span></div></pre></td></tr></table></figure>
<h3 id="第二步：安装插件"><a href="#第二步：安装插件" class="headerlink" title="第二步：安装插件"></a>第二步：安装插件</h3><p>pathogen管理插件很简单，只要把插件统一安装在<code>.vim/bundle</code>路径里面就好了。然后根据插件的需要，在<code>.vimrc</code>文件里面进行配置。有些插件比如<code>NerdTree</code>，<code>markdown-preview</code>可能还需要第三方插件的支持，大都可以通过<a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a>找到。所以你基本要做的是在你的<code>.vim/bundle</code>路径里面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;vim-plugin-repo-link&gt;</div></pre></td></tr></table></figure>
<h3 id="第三步：用Git管理Vim配置文件和插件"><a href="#第三步：用Git管理Vim配置文件和插件" class="headerlink" title="第三步：用Git管理Vim配置文件和插件"></a>第三步：用Git管理Vim配置文件和插件</h3><p>这一步主要运用的技术是Linux/Unix的<code>ln</code>命令来连接两个文件。首先在<code>.vim/</code>文件里建一个<code>vimrc</code>，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s ~/.vim/vimrc ~/.vimrc</div></pre></td></tr></table></figure>
<p>把根目录的<code>.vimrc</code>文件和<code>.vim/vimrc</code>文件进行同步链接，然后你会发现，在跟目录的<code>.vimrc</code>文件变成了<code>.vimrc</code>@文件，这说明此文件跟某一文件进行了链接。你可以试一下，在跟目录下的<code>.vimrc@</code>文件中做的任何更改会自动同步到<code>.vim/vimrc</code>文件中，反之亦然。然后，我们需要用Git的<code>submodule</code>命令把下载的Vim插件储存到<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="external">子模块</a>中。下面是关于<code>submodule</code>的基本操作。</p>
<ul>
<li>在.vim路径中初始化<code>submodule</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule init</div></pre></td></tr></table></figure>
<p>初始化submodule后，会在相应目录的到<code>.gitmodules</code>的文件，这个文件的格式是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[submodule &quot;子模块名称&quot;]</div><div class="line">	path = 子模块路径</div><div class="line">	url = 子模块链接</div></pre></td></tr></table></figure>
<ul>
<li>在<code>submodule</code>里<strong>添加</strong>插件链接：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add &lt;plug-in link&gt; bundle/&lt;plug-in filename&gt;</div></pre></td></tr></table></figure>
<p>举个例子，如果你想把<code>vim-sensible</code>添加在子模块中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add https://github.com/tpope/vim-sensible.git bundle/vim-sensible</div></pre></td></tr></table></figure>
<ul>
<li>在<code>submodule</code>里<strong>删除</strong>插件链接：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submoudle deinit &lt;submodule name&gt;</div><div class="line">git rm (-f or --cached) &lt;submodule name&gt;</div></pre></td></tr></table></figure>
<ul>
<li>这里删除有两种模式<code>-f</code>: delete file, <code>–cached</code>: leave file to local</li>
</ul>
<p>在更改了子模块的目录后，可以通过访问<code>.gitmodules</code>查看子模块是否更新。完成了对Vim插件子模块的处理后，我们只要把<code>.vim</code>目录里面所有的文件上传到Git就好了，可以选择GitHub或者Bitbucket来托管自己的Git仓库。</p>
<h3 id="第四步：下载并使用自己的Vim插件管理系统"><a href="#第四步：下载并使用自己的Vim插件管理系统" class="headerlink" title="第四步：下载并使用自己的Vim插件管理系统"></a>第四步：下载并使用自己的Vim插件管理系统</h3><p>如果你在一台新的mac上，或者你重装了系统，这个Vim插件管理系统就派上用场了，大体步骤如下：</p>
<ul>
<li>clone repo 到你的根目录并命名为<code>.vim/</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;your repo address&gt; ~/.vim</div></pre></td></tr></table></figure>
<ul>
<li>重新链接配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s ~/.vim/vimrc ~/.vimrc</div></pre></td></tr></table></figure>
<ul>
<li>通过<code>submodule</code>命令下载Vim插件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/.vim</div><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure>
<p>然后你的Vim插件就回来了哇咔咔。这个方法还可以用于保存你的<code>.bash_profile</code>，你也可以参考<a href="https://github.com/enzeM/dotvim" target="_blank" rel="external">我的Vim配置管理</a>，have fun。</p>
]]></content>
      
        <categories>
            
            <category> Unix/Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用BitBucket管理Hexo]]></title>
      <url>/2017/07/20/2017-Jul-bitbucket-hexo/</url>
      <content type="html"><![CDATA[<p>最近重装了电脑，于是把需要备份的资料进行备份，考虑到配置的隐私问题，我把Hexo博客托管到<a href="https://bitbucket.org" target="_blank" rel="external">Bitbucket</a>上。折腾了半天，也终于把Hexo架到了新装好的电脑上。在此记下，避免日后再次入坑：</p>
<h4 id="0-安装npm"><a href="#0-安装npm" class="headerlink" title="0 安装npm"></a>0 安装npm</h4><h4 id="1-重新搭建Hexo环境："><a href="#1-重新搭建Hexo环境：" class="headerlink" title="1 重新搭建Hexo环境："></a>1 重新搭建Hexo环境：</h4><ul>
<li>复制你的Hexo repo</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clone &lt;your blog address repo&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在repo路径中重新搭建Hexo环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div><div class="line">npm install hexo server --save</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p><code>npm install</code>是<strong>非常重要</strong>的，因为要在Hexo路径里面生成新的node环境，否则会出现<strong>can not find /GET</strong>的大白页面。</p>
<ul>
<li>添加其他相关的插件：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-asset-image --save</div></pre></td></tr></table></figure>
<p>hexo-asset-image 是一个很好用的图片管理插件，每次创建博客的时候会相应的创建一个与博文名同名的文件，在文件里放置图片，然后直接使用markdown图片链接语法 + 文件里的图片名就可以使用了。在使用前必须保证 <code>_config.yml</code>里面的<code>post_asset_folder</code>配置为<em>true</em>。</p>
<h4 id="2-重新下载Theme（也许可以用git的submodule功能取代）"><a href="#2-重新下载Theme（也许可以用git的submodule功能取代）" class="headerlink" title="2 重新下载Theme（也许可以用git的submodule功能取代）"></a>2 重新下载Theme（也许可以用git的submodule功能取代）</h4><ul>
<li>我使用的主题是<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant</a> 所以要在<code>theme/</code>路径复制以下代码：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div></pre></td></tr></table></figure>
<ul>
<li>maupassant主题的配置需要在其目录中的<code>_config.yml</code>文件完成。我在<code>theme/</code>路径下放置了一个备份文件夹theme_config.yml来备份主题的配置文件，所以每次就不需要重新修改了直接把备份文件内容传到maupassant主题下的<code>_config.yml</code>里面就好</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">less theme_config.yml &gt; maupassant/_config.yml</div></pre></td></tr></table></figure>
<ul>
<li>剩下的就是安装主题需要的插件:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-renderer-jade@0.3.0 --save</div><div class="line">npm install hexo-renderer-sass --save</div><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<h4 id="3-处理本地npm及相关modules不兼容问题"><a href="#3-处理本地npm及相关modules不兼容问题" class="headerlink" title="3 处理本地npm及相关modules不兼容问题"></a>3 处理本地npm及相关modules不兼容问题</h4><p>由于npm或其他module版本不一样，可能导致弹出一些异常，可以通过删除<code>node_modules/</code>文件夹然后使用<code>npm i</code>命令重新安装一下本地的npm，通常情况下可以解决一些module不兼容的问题。</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDBC 编程学习笔记]]></title>
      <url>/2017/07/15/2017-Jul-jdbc/</url>
      <content type="html"><![CDATA[<p>这篇文章是我对李刚老师的《疯狂Java讲义》第三版第十三章：MySQL 数据库与JDBC编程的学习总结。适合有一定SQL基础的同学，如果你还不是很了解SQL，建议去: <a href="https://www.w3schools.com/sql/default.asp" target="_blank" rel="external">w3school</a> 熟悉一下SQL的概念和基本语法。本文更专注于数据库在Java程序中的实践。</p>
<h2 id="SQL语句基础"><a href="#SQL语句基础" class="headerlink" title="SQL语句基础"></a>SQL语句基础</h2><table>
<thead>
<tr>
<th style="text-align:left">语句</th>
<th style="text-align:left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查询语句</td>
<td style="text-align:left">select</td>
</tr>
<tr>
<td style="text-align:left">DML(Data Manipulation Language)</td>
<td style="text-align:left">insert, update, delete</td>
</tr>
<tr>
<td style="text-align:left">DDL(Data Definition Language)</td>
<td style="text-align:left">create, alter, drop, truncate</td>
</tr>
<tr>
<td style="text-align:left">DCL(Data Control Language)</td>
<td style="text-align:left">grant, revoke</td>
</tr>
</tbody>
</table>
<h2 id="JDBC-常用类"><a href="#JDBC-常用类" class="headerlink" title="JDBC 常用类"></a>JDBC 常用类</h2><table>
<thead>
<tr>
<th style="text-align:left">接口／类</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Driver Manager</td>
<td style="text-align:left">用于管理JDBC驱动</td>
</tr>
<tr>
<td style="text-align:left">Connection</td>
<td style="text-align:left">数据库连接对象</td>
</tr>
<tr>
<td style="text-align:left">Statement</td>
<td style="text-align:left">用于执行SQL语句的工具接口</td>
</tr>
<tr>
<td style="text-align:left">PreparedStatement</td>
<td style="text-align:left">预编译的Statement对象</td>
</tr>
<tr>
<td style="text-align:left">CallableStatement</td>
<td style="text-align:left">用于调用储存过程</td>
</tr>
<tr>
<td style="text-align:left">ResultSet</td>
<td style="text-align:left">结果集对象</td>
</tr>
</tbody>
</table>
<h2 id="JDBC-编程步骤"><a href="#JDBC-编程步骤" class="headerlink" title="JDBC 编程步骤"></a>JDBC 编程步骤</h2><ul>
<li><p>Step1 加载数据库驱动:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>Step2 通过DriverManager获取数据库连接，获得Connection对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- jdbc:mysql://hostname:port/databasename</div></pre></td></tr></table></figure>
</li>
<li><p>Step3 通过Connection对象创建Statement对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 使用getStatement()、 prepareStatement()、prepareCall()等方法</div></pre></td></tr></table></figure>
</li>
<li><p>Step4 使用Statement对象执行SQL语句:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- execute()可执行任何SQL语句。 </div><div class="line">- executeUpdate()用于执行DML和DDL语句。在执行DML语句返回受影响行数，执行DDL语句返回0。</div><div class="line">- executeQuery()只执行查询语句，返回ResultSet对象。</div></pre></td></tr></table></figure>
</li>
<li><p>Step5 操作结果集:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 程序可通过 next(), previous(), first(), last(), beforeFirst(), beforeLast(), afterLast(), absolute()等方法移动记录指针。 </div><div class="line">- 通过getXXX(column index)获取记录指针指向行、列的值。</div></pre></td></tr></table></figure>
</li>
<li><p>Step6 回收数据库资源: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 关闭ResultSet、Statement、Connection等资源。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-用Properties类来加载属性文件"><a href="#1-用Properties类来加载属性文件" class="headerlink" title="1. 用Properties类来加载属性文件"></a>1. 用Properties类来加载属性文件</h3><h4 id="1-1-属性文件格式"><a href="#1-1-属性文件格式" class="headerlink" title="1.1 属性文件格式"></a>1.1 属性文件格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">drv = com.mysql.jdbc.Driver</div><div class="line">url = jdbc:mysql://hostname:port/databasename</div><div class="line">usr = username</div><div class="line">pwd = password</div></pre></td></tr></table></figure>
<p>例如下面的配置建立的连接会占用电脑的5555端口，生成一个people_list数据库的<code>Connection</code>对象，我们把这个配置文件命名为<code>mysql.ini</code>并将其放置在项目的根目录中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">drv = com.mysql.jdbc.Driver</div><div class="line">url = jdbc:mydql://127.0.0.1:3306/people_list</div><div class="line">usr = enzeM</div><div class="line">pwd = 1234567</div></pre></td></tr></table></figure>
<p>需要注意的是 MySQL 在计算机中的<strong>默认端口是3306</strong>，除非<a href="https://stackoverflow.com/questions/29866204/how-to-change-the-default-port-of-mysql-from-3306-to-3360" target="_blank" rel="external">更改MySQL的默认端口值</a>，否则把配置文件端口设为其他端口会出现<strong>MySQL连接异常</strong>。</p>
<h4 id="1-2-在Java程序中加载属性文件"><a href="#1-2-在Java程序中加载属性文件" class="headerlink" title="1.2 在Java程序中加载属性文件"></a>1.2 在Java程序中加载属性文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String drv;</div><div class="line"><span class="keyword">private</span> String url;</div><div class="line"><span class="keyword">private</span> String usr;</div><div class="line"><span class="keyword">private</span> String pwd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initConnFileds</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Properties p = <span class="keyword">new</span> Properties();</div><div class="line">	p.load(<span class="keyword">new</span> FileInputStream(fileName));</div><div class="line">	drv = p.getProperties(<span class="string">"drv"</span>);</div><div class="line">	url = p.getProperties(<span class="string">"url"</span>);</div><div class="line">	usr = p.getProperties(<span class="string">"usr"</span>);</div><div class="line">	pwd = p.getProperties(<span class="string">"pwd"</span>);</div><div class="line">	<span class="comment">//step1: load the database</span></div><div class="line">	Class.forName(<span class="string">"mysql.ini"</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-通过JDBC实现数据库的基本操作"><a href="#2-通过JDBC实现数据库的基本操作" class="headerlink" title="2. 通过JDBC实现数据库的基本操作"></a>2. 通过JDBC实现数据库的基本操作</h3><h4 id="2-1-用Statement和execute-写一个可以执行任何SQL语句的函数"><a href="#2-1-用Statement和execute-写一个可以执行任何SQL语句的函数" class="headerlink" title="2.1 用Statement和execute()写一个可以执行任何SQL语句的函数"></a>2.1 用Statement和execute()写一个可以执行任何SQL语句的函数</h4><blockquote>
<p>使用情境:</p>
<ul>
<li>在<strong>不清楚SQL语句类型</strong>的情况下可以使用。</li>
<li>使用getString()方法可以取得除Blob之外的任意类型列的值。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeSQL</span><span class="params">(String query)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">//step2l get Connection object</span></div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd); </div><div class="line">		Statement stmt = conn.createStatement()) &#123;<span class="comment">//step3: get Statement object</span></div><div class="line">		<span class="comment">//step4: get ResutSet object</span></div><div class="line">		<span class="keyword">boolean</span> hasResultSet = stmt.execute(query);</div><div class="line">		<span class="keyword">if</span>(hasResultSet) &#123;</div><div class="line">			<span class="keyword">try</span>(ResultSet rs = stmt.getResutSet()) &#123;</div><div class="line">				<span class="comment">//use metadata object to visit all possible info from tables</span></div><div class="line">				ResultSetMetaData rsmd = rs.getMetaData();</div><div class="line">				<span class="keyword">int</span> colunmCount = rsmd.getColumnCount();</div><div class="line"></div><div class="line">				<span class="comment">//print result after execute the query</span></div><div class="line">				<span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;colunmCount; i++) &#123;</div><div class="line">						System.out.print(rs.getString(i+<span class="number">1</span>) + <span class="string">"\t"</span>);</div><div class="line">					&#125;</div><div class="line">					System.out.println();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"this query effect "</span></div><div class="line">					+ stmt.getUpdateCount() + <span class="string">" record(s) in the database"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码使用<code>execute()</code>来执行SQL语句返回了一个<code>boolean</code>值，它表明SQL是否返回了<code>ResultSet</code>对象。然后程序用<code>getResutSet()</code> 获取<code>Statement</code>执行查询语句后的<code>RsultSet</code>。使用<code>getUpdateCount()</code>获取<code>Statement</code> DML语句所影响的记录行数。</p>
<h4 id="2-2-用PreparedStatement执行SQL语句"><a href="#2-2-用PreparedStatement执行SQL语句" class="headerlink" title="2.2 用PreparedStatement执行SQL语句"></a>2.2 用PreparedStatement执行SQL语句</h4><blockquote>
<p>使用情境：</p>
<ul>
<li>适用于经常需要反复执行的一条语句</li>
<li>使用占位符<code>?</code>代替需要输入的参数</li>
<li>预编译SQL语句，性能更好</li>
<li>防止SQL注入攻击，安全性高</li>
</ul>
</blockquote>
<p><code>PreparedStatement</code>对象储存了预编译SQL语句，因此可以高效的反复执行该语句。<br>若清楚表格的参数类型，我们可以使用<code>setXXX(int index, XXX value)</code>的方法传入参数。若<strong>不清楚</strong>表格的参数类型，我们可以使用<code>setObject()</code>的方法传入参数。接下来，我们在数据库里建一个Employees，然后完成：<em>0）加入新的employee record</em>、<em>2）根据ID找出Employee在Table里记录的讯息</em>。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees (</div><div class="line">	<span class="keyword">ID</span> <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</div><div class="line">	<span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">	Occupation <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</div><div class="line">	Salary <span class="built_in">INT</span></div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li><em>加入新的employee record:</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNewEmployee</span><span class="params">(String name, String occupation, <span class="keyword">int</span> salary)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd); </div><div class="line">		PreparedStatement pstmt = conn.prepareStatement(<span class="string">"INSERT INTO Employee VALUES(null, ?, ?, ?)"</span>)) &#123;</div><div class="line">		<span class="comment">//pstmt.setXXX(index, value)</span></div><div class="line">		pstmt.setString(<span class="number">1</span>, <span class="string">"Tom"</span>);</div><div class="line">		pstmt.setString(<span class="number">2</span>, <span class="string">"Java Enginner"</span>);</div><div class="line">		pstmt.setInt(<span class="number">3</span>, <span class="number">20000</span>);</div><div class="line">		pstmt.executeUpdate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的index指的是占位符<code>?</code>的位置，跟数组不同的是，<strong>SQL中的index相关的起始位置为1而不是0</strong>，比如column也是从0开始的。上面的代码用<code>PreparedStatement</code>的<code>setXXX()</code>方法添加了新的employee record并且在最后使用<code>executeUpdate()</code>更新了Table, 下面的代码实现了根据ID找出Employee在数据库里面的讯息</p>
<ul>
<li><em>根据ID找出Employee在Table里记录的讯息:</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findEmployeeBy</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line">			PreparedStatement pstmt = conn.prepareStatement(<span class="string">"SELECT * FROM Employee WHERE ID=?"</span>)) &#123;</div><div class="line">		pstmt.setInt(<span class="number">1</span>, id); <span class="comment">//replace ? to id parameter</span></div><div class="line">		ResultSet rs = pstmt.executeQuery(); <span class="comment">//get result set</span></div><div class="line">		<span class="comment">//if we know number of column in the table </span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		   if(rs.next()) &#123;</div><div class="line">			   for(int i=0; i&lt;4; i++) &#123;</div><div class="line">				   System.out.print(rs.getString(i+1)+"\t");</div><div class="line">			   &#125;</div><div class="line">			   System.out.println();</div><div class="line">		   &#125;</div><div class="line">		*/</div><div class="line">		<span class="comment">//if we do not know abut the table, we use metadata</span></div><div class="line">		ResultSetMetaData rsmd = rs.getMetaData();</div><div class="line">		<span class="keyword">int</span> columnCount = rsmd.getColumnCount();</div><div class="line">		<span class="keyword">if</span>(rs.next()) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;columnCount; i++) &#123;</div><div class="line">				System.out.print(rs.getString(i+<span class="number">1</span>)+<span class="string">"\t"</span>);</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-用CallableStatement调用储存过程（Procedure）"><a href="#2-3-用CallableStatement调用储存过程（Procedure）" class="headerlink" title="2.3 用CallableStatement调用储存过程（Procedure）"></a>2.3 用CallableStatement调用储存过程（Procedure）</h4><blockquote>
<p>使用情境：需要调用数据库中定义的procedure来处理数据</p>
</blockquote>
<p>例子：建立一个<a href="https://dev.mysql.com/doc/refman/5.7/en/create-procedure.html" target="_blank" rel="external">储存过程</a>:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">delimiter //</div><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> diff_salary(a <span class="built_in">int</span>, b <span class="built_in">int</span>, <span class="keyword">out</span> diff <span class="built_in">int</span>)</div><div class="line"></div><div class="line"><span class="keyword">begin</span></div><div class="line"><span class="keyword">set</span> diff = <span class="keyword">abs</span>(a - b)</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<p>以上例子在数据库里定义了一个procedure diff_salary 来计算两个input的差值。我们要通过程序调用这个procedure，需要使用<code>CallableStatement</code>，以下是具体步骤：</p>
<ul>
<li><em>使用<code>CallableStatement</code>调用<code>procedure:</code></em></li>
</ul>
<ol>
<li>用<code>Connection</code>对象的<code>prepareCall()</code>方法生成<code>CallableStatement</code>对象</li>
<li>用<code>CallableStatment</code>的<code>setXXX()</code>为procedure传入参数</li>
<li>用<code>rigisterOutParameter()</code>的方法来注册获取储存过程的值</li>
<li>用<code>CallStatement</code>的<code>execute()</code>方法来执行储存过程</li>
<li>用<code>getXXX(int index)</code>获取指定参数的值</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callDiffSalaryProc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd); </div><div class="line">			CallableStatment cstmt = conn.prepareCall(<span class="string">"&#123;call diff_salary(?, ?, ?)&#125;"</span>)) &#123; <span class="comment">//注意这里使用的格式</span></div><div class="line">		cstmt.setInt(<span class="number">1</span>, a);</div><div class="line">		cstmt.setInt(<span class="number">2</span>, b);</div><div class="line">		cstmt.registerOutParameter(<span class="number">3</span>, TYPE.INTEGER);</div><div class="line">		cstmt.execute();</div><div class="line">		System.out.println(<span class="string">"result is:"</span>+cstmt.getInt(<span class="number">3</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="管理结果集-to-be-continue"><a href="#管理结果集-to-be-continue" class="headerlink" title="管理结果集(to be continue)"></a>管理结果集(to be continue)</h3><blockquote>
<p>使用情境：</p>
<ul>
<li>移动ResultSet记录指针取出结果集的内容</li>
<li>通过ResultSet更新记录（record）</li>
</ul>
</blockquote>
<p>在前面的例子中只使用了next()方法移动指针，除此之外absolute()、previous() 、afterLast() 等方法也可以移动指针。<br>默认的ResultSet是不可更新的，可更新的ResultSet需要在创建Statement或PreparedStatement时传入额外的参数。</p>
<p>resultSetType控制ResultSet的类型，该参数有以下三个值：</p>
<ul>
<li>ResultSet.TYPE_FORWORD_ONLY：控制记录指针只向前移动。</li>
<li>ResultSet.TYPE_SCROLL_INSENSITIVE：控制记录指针可自由移动，底层数据改变不影响ResultSet内容。</li>
<li>ResultSet.TYPE_SCROLLSENSITIVE：控制记录指针可自由移动，底层数据改变影响Result内容。</li>
</ul>
<p>resultSetConcurrency：控制ResultSet的并发类型，该参数可接受以下值：</p>
<ul>
<li>ResultSet.CONCUR_READ_ONLY：指示ResultSet是只读的并发模式（默认）</li>
<li>ResultSet.CONCUR_UPDATABLE：指示ResultSet是可更新的并发模式</li>
</ul>
<p>下列的例子创建了一个可滚动、可更新的结果集（表格参考上面的Employee）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd); </div><div class="line">		<span class="comment">//在创建PreparedStatement时传入控制结果集科滚动、可更新的参数</span></div><div class="line">		PreparedStatement pstmt = conn.prepareStatement(sql</div><div class="line">			, ResultSet.TYPE_SCROLL_INSENSITIVE</div><div class="line">			, ResultSet.CONCUR_UPDATABLE);</div><div class="line">		ResultSet rs = pstmt.executeQuery()) &#123;</div><div class="line"></div><div class="line">		rs.last(); <span class="comment">//记录指针指向最后一条记录</span></div><div class="line">		<span class="keyword">int</span> rowCount = rs.getRow();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=rowCount; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">			rs.absolute(i) <span class="comment">//</span></div><div class="line">			<span class="comment">//id, name, occupation, salary</span></div><div class="line">			System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">"\t"</span></div><div class="line">				+ rs.getString(<span class="number">2</span>) + <span class="string">"\t"</span></div><div class="line">				+ rs.getString(<span class="number">3</span>) + <span class="string">"\t"</span></div><div class="line">				+ rs.getString(<span class="number">4</span>));</div><div class="line">			<span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</div><div class="line">				rs.updateString(<span class="number">4</span>, <span class="number">50000</span>); <span class="comment">//把第2条记录的salary值设为5万</span></div><div class="line">				rs.updateRow(); <span class="comment">//提交修改</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="处理Blob类型数据"><a href="#处理Blob类型数据" class="headerlink" title="处理Blob类型数据"></a>处理Blob类型数据</h3><blockquote>
<p>使用情境：处理大文件。</p>
</blockquote>
<p>Blob（Binary Long Object）常用于储存大文件如图片或音频文件。</p>
<ul>
<li>传入数据库：使用PreparedStatement的 <code>setBinaryStream(int parameterIndex, InputStream x)</code> 将制定参数传入二进制输入流，从而将Blob数据保存到数据库</li>
<li>访问数据库：调用ResultSet的<code>getBlob(int column)</code>得到Blob对象，使用Blob对象的 <code>getBinaryStream()</code> 或 <code>getByte()</code> 方法直接取出该Blob对象封装的二进制数据。</li>
</ul>
<p>上传图片到数据库示例：</p>
<ul>
<li>建立数据库，MySQL数据库里的Blob类型最多只能储存64KB内容，可能不够满足实际用途，使用MEDIUMBLOB可储存16MB内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE img_table (</div><div class="line">IMG_ID INT AUTO_INCREAMENT PRIMARY KEY,</div><div class="line">IMG_NAME VARCHAR(255),</div><div class="line">IMG_DATA MEDIUMBLOB)</div></pre></td></tr></table></figure>
<ul>
<li>上传图片至数据库函数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uploadImage</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">	String imageName = fileName.substring(fileName.lastIndexOf(<span class="string">'\\'</span>) + <span class="number">1</span> , fileName.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">	File f = <span class="keyword">new</span> File(fileName);</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line">		/／创建执行插入操作的PreparedStatement对象，该对象执行插入操作后返回自动生成的主键</div><div class="line">		PreparedStatement pstmt = conn.prepareStatemet(<span class="string">"insert into img_table values(null, ?, ?)"</span> </div><div class="line">						, Statement.RETURN_GENERATED_KEYS);</div><div class="line">		InputStream is = <span class="keyword">new</span> FileInputStream(f)) &#123;</div><div class="line">		pstmt.setString(<span class="number">1</span>, imageName); <span class="comment">//设置图片名参数</span></div><div class="line">		pstmt.setBinaryStream(<span class="number">2</span>, is, (<span class="keyword">int</span>)f.length()); <span class="comment">//设置二进制流参数</span></div><div class="line">		pstmt.executeUpdate();</div><div class="line">	&#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问数据库图片：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">ImageIcon <span class="title">getImage</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">try</span>(Connection conn = DriverManager.getConnection(url, usr, pwd); </div><div class="line">		PreparedStatement pstmt = conn.prepareStatemet(<span class="string">"select image_id, image_name from image_table where img_id=?"</span>)) &#123;</div><div class="line">		pstmt.setInt(<span class="number">1</span>, id);</div><div class="line">		ResultSet rs = pstmt.executeQuery();</div><div class="line">		<span class="keyword">if</span>(rs.next()) &#123;</div><div class="line">			Blob imgBlob = rs.getBlob(<span class="number">1</span>); <span class="comment">//取出Blob列</span></div><div class="line">			<span class="comment">//取出Blob列里的数据</span></div><div class="line">			ImageIcon icon = <span class="keyword">new</span> ImageIcon(imgBlob.getBytes(<span class="number">1L</span>, (<span class="keyword">int</span>)imgBlob.length()) );</div><div class="line">			<span class="keyword">return</span> icon;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">//return an empty ImageIcon object</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ImageIcon();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过RowSetFactory和RowSetProvider使用RowSet"><a href="#通过RowSetFactory和RowSetProvider使用RowSet" class="headerlink" title="通过RowSetFactory和RowSetProvider使用RowSet"></a>通过RowSetFactory和RowSetProvider使用RowSet</h3><blockquote>
<p>使用情境：优化数据库性能，保证数据库安全</p>
</blockquote>
<p>为什么使用RowSet：</p>
<ul>
<li>RowSet继承了ResultSet接口,是离线的数据集，毋需与数据库保持连接。</li>
<li>RowSet默认是可滚动、可更新、可序列化的结果集。</li>
<li>RowSet作为JavaBean使用，可方便的在网络上传输。</li>
<li>程序在创建RowSet时以把数据从底层数据库读取到了内存，降低数据服务器的负载，提高程序性能。</li>
</ul>
<p>Java目前提供了JdbcRowSetImpl作为RowSet的实现类，但不建议使用JdbcRowSetImpl的方法使用RowSet，因为JdbcRowSetImpl是个未被公开的API，未来有被删除的可能性。在Java 7以后允许使用RowSetProvider类和RowSetFactory接口使用RowSet，这样可以：</p>
<ul>
<li>把应用程序和RowSet实现类分离开</li>
<li>避免使用JdbcRowSetImpl等非公开API</li>
<li>有利于软件后期的升级和拓展</li>
</ul>
<p>使用RowDetFactory创建JdbcRowSet示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String drv;</div><div class="line"><span class="keyword">private</span> String url;</div><div class="line"><span class="keyword">private</span> String usr;</div><div class="line"><span class="keyword">private</span> String pwd;</div><div class="line"><span class="comment">//使用properties提取配置文件中的drv、url等讯息，此处省略</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Class.forName(driver);</div><div class="line">	<span class="comment">//使用RowSetProvider创建RowSetFactory</span></div><div class="line">	RowSetFactory factory = RowSetProvider.newFactory();</div><div class="line">	<span class="comment">//使用RowSetFactory创建默认的JdbcRowSet实例</span></div><div class="line">	<span class="keyword">try</span>(JdbcRowSet jdbcRs = factory.createJdbcRowSet()) &#123;</div><div class="line">		<span class="comment">//设置连接讯息 </span></div><div class="line">		jdbcRs.setUrl(url);</div><div class="line">		jdbcRs.setUsername(usr);</div><div class="line">		jdbcRs.setPassword(pwd);</div><div class="line">		<span class="comment">//执行查询</span></div><div class="line">		jdbcRs.setCommand(sql);</div><div class="line">		jdbcRs.execute();</div><div class="line"></div><div class="line">		<span class="comment">//执行相应操作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假设应用程序有数据访问层和视图显示层，如果使用ResultSet，对于访问层的查询的结果（ResultSet实例）以下两种常见方式：</p>
<ul>
<li>使用迭代访问ResultSet里的记录，将记录转成Java Bean，然后将多个Java Bean封装成一个List集合，转换完成后可关闭Connection等资源，然后将Java Bean集合转到视图显示层。（比较安全，但是麻烦）</li>
<li>直接将ResultSet传到视图显示层。（要求当视图显示层显示数据时，底层Connection必须一直处于打开状态，不安全并且影响程序性能）<br>通过使用离线RowSet可以优雅地解决上面的问题。离线RowSet将底层数据读入内存中，封装层RowSet对象，并且完全可以当成Java Bean来使用，因此安全，并且实现过程简单。CachedRowSet是所有离线RowSet的父接口，下面是具体实现过程：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建类名为CachedRowSetTest的文件</span></div><div class="line"><span class="comment">//使用properties加载配置文件，此处省略</span></div><div class="line"></div><div class="line"><span class="comment">//生成CachedRowSet的方法</span></div><div class="line"><span class="function"><span class="keyword">void</span> CachedRowSet <span class="title">generateCachedRowSet</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Class.forName(drv);</div><div class="line">	Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line">	Statement stmt = conn.createStatement();</div><div class="line">	ResultSet rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">	<span class="comment">//1.用RowSetProvider创建RowSetFactory</span></div><div class="line">	RowSetFactory factory = RowSetProvider.newFactory();</div><div class="line">	<span class="comment">//2.创建CachedRowSet实例</span></div><div class="line">	CachedRowSet crs = factory.createCachedRowSet();</div><div class="line">	<span class="comment">//3.用ResultSet装填RowSet</span></div><div class="line">	crs.populate(rs);</div><div class="line">	<span class="comment">//4.关闭资源</span></div><div class="line">	rs.close()</div><div class="line">	stmt.close();</div><div class="line">	conn.close();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> crs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	CachedRowSetTest c = <span class="keyword">new</span> CachedRowSetTest();</div><div class="line">	CachedRowSet crs = c.generateCachedRowSet(<span class="string">"select * from Employees"</span>);<span class="comment">//参考前面的Employees Table</span></div><div class="line">	crs.afterLast();</div><div class="line">	<span class="comment">//向前滚动结果集</span></div><div class="line"><span class="function">i	<span class="title">while</span><span class="params">(crs.previous()</span>) </span>&#123;</div><div class="line">		<span class="comment">//id, name, occupation, salary</span></div><div class="line">		System.out.println(crs.getString(<span class="number">1</span>) + <span class="string">"\t"</span></div><div class="line">			+ crs.getString(<span class="number">2</span>) + <span class="string">"\t"</span></div><div class="line">			+ crs.getString(<span class="number">3</span>) + <span class="string">"\t"</span></div><div class="line">			+ crs.getString(<span class="number">4</span>));</div><div class="line"></div><div class="line">		<span class="comment">//把ID为10的record Salary更新为50000</span></div><div class="line">		<span class="keyword">if</span>(crs.getInt(<span class="string">"ID"</span>) == <span class="number">10</span>) &#123;</div><div class="line">			crs.updateString(<span class="string">"Salary"</span>, <span class="number">50000</span>);</div><div class="line">			crs.updateRow();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//重新连接数据库并把对RowSet所做的修改同步到底层数据库</span></div><div class="line">	Connection conn = DriverManager.getConnection(url, usr, pwd);</div><div class="line">	conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">	crs.accaptChanges(conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中RowSet调用了<code>populate(ResultSet rs)</code>方法来包装给定的ResultSet再关闭资源。如果程序直接返回ResultSet，这个ResultSet是<strong>无法使用的</strong>因为底层的Connection关闭后ResultSet将无法使用。所以要把ResultSet封装进CachedRowSet里面再返回CachedRowSet实例。</p>
<h1 id="离线RowSet的查询分页（to-be-continue"><a href="#离线RowSet的查询分页（to-be-continue" class="headerlink" title="离线RowSet的查询分页（to be continue)"></a>离线RowSet的查询分页（to be continue)</h1>]]></content>
      
        <categories>
            
            <category> Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[像打咏春一样使用Vim]]></title>
      <url>/2016/04/30/2016-Apr-vim-wingchun/</url>
      <content type="html"><![CDATA[<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-5334967071a76020.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片源自网络"><br></div>

<blockquote>
<h3 id="“我学功夫，从15岁开始，每天挥刀500下，这个数管住了我。从今天起，我以你为约束。”"><a href="#“我学功夫，从15岁开始，每天挥刀500下，这个数管住了我。从今天起，我以你为约束。”" class="headerlink" title="“我学功夫，从15岁开始，每天挥刀500下，这个数管住了我。从今天起，我以你为约束。”"></a><strong>“我学功夫，从15岁开始，每天挥刀500下，这个数管住了我。从今天起，我以你为约束。”</strong></h3><h3 id="－－电影《师傅》"><a href="#－－电影《师傅》" class="headerlink" title="－－电影《师傅》"></a><strong>－－电影《师傅》</strong></h3></blockquote>
<p>看过甄子丹演的《叶问》三部曲，陈国坤演的《李小龙传奇》最喜欢廖凡演的《师傅》（台词精炼，耐人寻味）。咏春拳给我的印象是招数简单实用，攻防兼备，常以速度制胜。这跟 Vim 的哲学有异曲同工之妙。甚至觉得有时候用 Vim 编程感觉像练功，没有 IDE 那样繁多的提示和功能，纯粹的写代码。这里总结点儿我平时使用 Vim 的窍门，让你用起 Vim 来像咏春一样快（快速移动光标），狠（疯狂码字），准（准确删除／修改）</p>
<ul>
<li>Part1：手指不要轻易离开主键区</li>
<li>Part2：让光标跟上眼睛</li>
<li>Part3：Vim 语熟于心</li>
<li>Part4：常用 Vim 语实战（会持续更新）</li>
</ul>
<h1 id="Part1：手指不要轻易离开主健区"><a href="#Part1：手指不要轻易离开主健区" class="headerlink" title="Part1：手指不要轻易离开主健区"></a>Part1：手指不要轻易离开主健区</h1><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-1724f5ec9048d2d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="键盘上的主键区（图片源于网络）"><br></div>

<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/咏春拳#.E9.99.B3.E8.8F.AF.E9.A1.BA" target="_blank" rel="external">咏春：中門論</a> ─人體中門最弱，是攻擊目標，也是重點守護的地方。</p>
</blockquote>
<p>要提高使用Vim的效率，在保证功能的情况下，尽量缩小打字的范围，守护我们的“中门”（主键区）。这里有几点建议：</p>
<ol>
<li>不用 方向键，用 <code>hjkl</code> （入门基本素养）</li>
<li>不用 <code>Esc</code>，用 <code>control + [</code></li>
<li>不用 <code>Back Space</code>，用 <code>x/D/c/C</code> 等</li>
<li>把键盘上的 <code>Cap Lock</code> 换成 <code>Control</code></li>
<li>常用<code>ctrl ＋ p</code>或<code> ctrl ＋ n</code>补全输入</li>
<li>常用<code>.</code>（英文句号）重复上一个命令</li>
<li>盲打（进阶必备素养）</li>
<li>用<code>set nu</code>和 <code>set rnu</code> 让行数行距尽收眼底:<br><img src="http://upload-images.jianshu.io/upload_images/1816409-48500c52fc9dbd8a.gif?imageMogr2/auto-orient/strip" alt=":set nu :set rnu"><br><br></li>
</ol>
<h1 id="Part2：让光标跟上眼睛"><a href="#Part2：让光标跟上眼睛" class="headerlink" title="Part2：让光标跟上眼睛"></a>Part2：让光标跟上眼睛</h1><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>光标置顶</td>
<td style="text-align:center"><code>gg</code></td>
</tr>
<tr>
<td>光标至底</td>
<td style="text-align:center"><code>G </code></td>
</tr>
<tr>
<td>光标至页顶</td>
<td style="text-align:center"><code>ctrl + h</code></td>
</tr>
<tr>
<td>光标至页底</td>
<td style="text-align:center"><code>ctrl + m</code></td>
</tr>
<tr>
<td>光标至页中</td>
<td style="text-align:center"><code>ctrl + l</code></td>
</tr>
<tr>
<td>光标至句首</td>
<td style="text-align:center"><code>ctrl + ^</code></td>
</tr>
<tr>
<td>光标至句尾</td>
<td style="text-align:center"><code>ctrl + $</code></td>
</tr>
<tr>
<td>往下翻页</td>
<td style="text-align:center"><code>ctrl + d</code></td>
</tr>
<tr>
<td>往上翻页</td>
<td style="text-align:center"><code>ctrl + p</code></td>
</tr>
</tbody>
</table>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-ef3542f581f07dcc.gif?imageMogr2/auto-orient/strip" alt="瞬移光标"><br></div>

<h1 id="Part3：Vim-语熟于心"><a href="#Part3：Vim-语熟于心" class="headerlink" title="Part3：Vim 语熟于心"></a>Part3：Vim 语熟于心</h1><blockquote>
<p>Vim 语法结构：［数字］＋ 动词 ＋ 介词 ＋ 名词／符号</p>
<ul>
<li>数字表示重复命令的次数，省略则表示只执行一次。</li>
<li>语法结构必须严格遵循：[数字] ＋ 动词 ＋ 介词 ＋ 名词／符号的顺序使用，否则可能没有意义。</li>
<li>语法是死的，语言是活的，结合具体的情况使用即可使事半功倍。</li>
</ul>
</blockquote>
<h2 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h2><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>删除(delete):</td>
<td style="text-align:center"><code>d</code></td>
</tr>
<tr>
<td>修改(change):</td>
<td style="text-align:center"><code>c</code></td>
</tr>
<tr>
<td>复制(yank):</td>
<td style="text-align:center"><code>y</code></td>
</tr>
<tr>
<td>选取(visual select):</td>
<td style="text-align:center"><code>v</code></td>
</tr>
</tbody>
</table>
<ul>
<li>替换（replace）命令是 <code>r</code> 不支持 Vim 语法结构，修改错别责的时候常用，格式是 <code>r</code> + 正确的字母／字符</li>
</ul>
<h2 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h2><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>在…之内(inner)</td>
<td style="text-align:center"><code>i</code></td>
</tr>
<tr>
<td>在…周围(around)</td>
<td style="text-align:center"><code>a</code></td>
</tr>
<tr>
<td>到…位置前(to)</td>
<td style="text-align:center"><code>t</code></td>
</tr>
<tr>
<td>到…位置上(forward)</td>
<td style="text-align:center"><code>f</code></td>
</tr>
</tbody>
</table>
<ul>
<li><strong>注意：</strong><code>i</code>/<code>a</code>/<code>f</code>在当动词使用的时候分别表示 插入(insert)，增补(append)，查询(find)，然而 <code>t</code> 只有作介词(表示 to) 和符号(表示 tag) 的时候才有意义，请不要混淆了。</li>
</ul>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>一个单词(word)</td>
<td style="text-align:center"><code>w</code></td>
</tr>
<tr>
<td>一个句子(sentence)</td>
<td style="text-align:center"><code>s</code></td>
</tr>
<tr>
<td>一个段落(paragraph)</td>
<td style="text-align:center"><code>p</code></td>
</tr>
</tbody>
</table>
<h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h2><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>逗号</td>
<td style="text-align:center"><code>,</code></td>
</tr>
<tr>
<td>句号</td>
<td style="text-align:center"><code>.</code></td>
</tr>
<tr>
<td>分号</td>
<td style="text-align:center"><code>;</code></td>
</tr>
<tr>
<td>一个标签(tag)</td>
<td style="text-align:center"><code>t</code></td>
</tr>
<tr>
<td>圆括号</td>
<td style="text-align:center"><code>(</code> 或 <code>)</code></td>
</tr>
<tr>
<td>方括号</td>
<td style="text-align:center"><code>[</code>或 <code>]</code></td>
</tr>
<tr>
<td>花括号</td>
<td style="text-align:center"><code>{</code>或 <code>}</code></td>
</tr>
</tbody>
</table>
<p><br></p>
<h1 id="Part4：常用-Vim-语实战（会持续更新）"><a href="#Part4：常用-Vim-语实战（会持续更新）" class="headerlink" title="Part4：常用 Vim 语实战（会持续更新）"></a>Part4：常用 Vim 语实战（会持续更新）</h1><h2 id="1-单词／段落"><a href="#1-单词／段落" class="headerlink" title="1. 单词／段落"></a>1. 单词／段落</h2><table>
<thead>
<tr>
<th style="text-align:center">效果</th>
<th style="text-align:center">命令</th>
<th style="text-align:center">记忆窍门</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">删除一个单词</td>
<td style="text-align:center"><code>daw</code></td>
<td style="text-align:center">delete a word</td>
</tr>
<tr>
<td style="text-align:center">替换一个单词</td>
<td style="text-align:center"><code>caw</code></td>
<td style="text-align:center">change a word</td>
</tr>
<tr>
<td style="text-align:center">选取一个单词</td>
<td style="text-align:center"><code>vaw</code></td>
<td style="text-align:center">visual-select a word</td>
</tr>
<tr>
<td style="text-align:center">删除一个段落</td>
<td style="text-align:center"><code>dap</code></td>
<td style="text-align:center">delete a paragraph</td>
</tr>
<tr>
<td style="text-align:center">替换一个段落</td>
<td style="text-align:center"><code>cap</code></td>
<td style="text-align:center">change a paragraph</td>
</tr>
<tr>
<td style="text-align:center">选取一个段落</td>
<td style="text-align:center"><code>vap</code></td>
<td style="text-align:center">visual-select a paragraph</td>
</tr>
</tbody>
</table>
<ol>
<li>delete a word</li>
</ol>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-c65e2ea0edb9d77b.gif?imageMogr2/auto-orient/strip" alt="daw 命令效果"><br></div>

<ol>
<li><p>change a word</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-5e6bc6f32b361bc8.gif?imageMogr2/auto-orient/strip" alt="caw 命令效果"><br></div>
</li>
<li><p>visual-select a word</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-3d8a4e1089a7f143.gif?imageMogr2/auto-orient/strip" alt="vaw 命令效果"><br></div>
</li>
<li><p>delete a paragraph</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-da78c24edf01c77d.gif?imageMogr2/auto-orient/strip" alt="dap 命令效果"><br></div>
</li>
<li><p>change a paragraph</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-2a466dc3ce0f797b.gif?imageMogr2/auto-orient/strip" alt="cap 命令效果"><br></div>

</li>
</ol>
<p>6.visual-select a paragraph</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-b4c27bc6d69a1ab6.gif?imageMogr2/auto-orient/strip" alt="vap 命令效果"><br></div>

<p><strong>想一想：</strong>如果把命令中的 <code>a</code> 换成 <code>i</code> 会有什么不同呢？</p>
<h2 id="2-程序员常用-Vim-语"><a href="#2-程序员常用-Vim-语" class="headerlink" title="2. 程序员常用 Vim 语"></a>2. 程序员常用 Vim 语</h2><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">效果</th>
<th style="text-align:center">记忆窍门</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">清除括号里的内容</td>
<td style="text-align:center"><code>di(/di[/di{</code> 或 <code>di)/di]/di}</code></td>
<td style="text-align:center">delete inside ()/[]/{}</td>
</tr>
<tr>
<td style="text-align:center">清除整个括号</td>
<td style="text-align:center"><code>da(/da[/da{</code>或 <code>da)/da]/da}</code></td>
<td style="text-align:center">delete around ()/[]/{}</td>
</tr>
<tr>
<td style="text-align:center">清除标签里面的内容</td>
<td style="text-align:center"><code>dit</code></td>
<td style="text-align:center">delete in tag</td>
</tr>
<tr>
<td style="text-align:center">清除整个标签的内容</td>
<td style="text-align:center"><code>dat</code></td>
<td style="text-align:center">delete all tag</td>
</tr>
</tbody>
</table>
<ol>
<li><p>delete inner bracket/tag<br><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-78566426a4bcefcc.gif?imageMogr2/auto-orient/strip" alt="清除括号／标签里的内容"></div></p>
<div>
</div></li>
<li><p>delete a bracket/tag<br><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-28f2b2cc1b870b48.gif?imageMogr2/auto-orient/strip" alt="清除整个括号／标签"></div></p>
<div>

</div></li>
</ol>
<p><strong>想一想：</strong>如果要替换括号／标签里面的内容或者替换整个括号／标签应该如何做呢？</p>
<h3 id="提速策略"><a href="#提速策略" class="headerlink" title="提速策略"></a>提速策略</h3><p>仔细观看上面的实例，你也许会发现，无论在单词／段落／标签的<strong>任意一个位置（首部，中间，结尾）以上命令均可使用</strong>。这意味着你可以放心的使用<strong>Part1 中的第六条建议：常用<code>.</code>（英文句号）重复执行命令</strong>。接下来，你便可以用点点点，来删删删，改改改，有没有像打咏春拳一样的快感？</p>
<h2 id="3-句子"><a href="#3-句子" class="headerlink" title="3. 句子"></a>3. 句子</h2><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">向后清除到字母／符号的内容</td>
<td style="text-align:center"><code>df字母／符号</code></td>
</tr>
<tr>
<td style="text-align:center">向前清除到字母／符号的内容</td>
<td style="text-align:center"><code>dF字母／符号</code></td>
</tr>
<tr>
<td style="text-align:center">向前清除到字母／符号之前的内容</td>
<td style="text-align:center"><code>dT字母／符号</code></td>
</tr>
<tr>
<td style="text-align:center">向后清除到字母／符号之前的内容</td>
<td style="text-align:center"><code>dt字母／符号</code></td>
</tr>
</tbody>
</table>
<p><img src="http://upload-images.jianshu.io/upload_images/1816409-eee1cdc1fd8e0353.gif?imageMogr2/auto-orient/strip" alt="修改句子效果图"></p>
<p><strong>想一想：</strong>如果把命令中的 <code>d</code> 替换成 <code>v</code> 或者 <code>c</code> 会有什么效果呢？</p>
<p>当然，在修改句子的时候就不能在任意的地方用 <code>.</code>（英文句号）来重复修改内容了。但是我们依然可以使用 <code>.</code> 来快速到达指定的位置。</p>
<p>希望这篇文章对于喜欢 Vim 的朋友有帮助，这篇文章只包括了 Vim 从初级到进阶的一部分技巧，大家若有任何意见或建议请多多指教。都看到这儿了，给大家发个福利<a href="http://pdf.th7.cn/down/files/1411/Practical%20Vim.pdf" target="_blank" rel="external">《Vim 实用技巧》高清英文版PDF</a>（中文版我没找着，不嫌弃就收了顺便练练英文吧）感谢大家听我唠叨哈哈，里面有很多实用有趣的实例。下载不了的话可以简信我。</p>
<p><strong>P.S. 特别感谢：</strong><br>和我一起用 Vim 玩耍的小伙伴 Seven<br><a href="http://www.jianshu.com/users/ca02dbb20a04/latest_articles" target="_blank" rel="external">song4</a> 和他的这篇<a href="http://www.jianshu.com/p/a361ce8c97bc" target="_blank" rel="external">一起来说Vim语</a><br>Drew Neil 的《Vim 实用技巧》</p>
]]></content>
      
        <categories>
            
            <category> Unix/Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Powerline美化你的mac终端]]></title>
      <url>/2016/04/02/2016-Apr-mac-powerline/</url>
      <content type="html"><![CDATA[<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-70951021c362540a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Powerline 效果图1"><br></div>

<p>我用 Mac 编程，平时用 vim 作为编辑器写代码。时间长了，觉得终端和 vim 的主题单调了点儿，从哥们儿 Seven 那儿知道了 Powerline 这个用 Python 写的脚本可以美化终端，于是便安装着试试，结果倒是碰了不少壁。最后还是从 Seven 那知道了 Powerline 有效的安装方法，在此特别鸣谢，也决定向用 Mac 的朋友们分享一下。好啦废话不说，先秀一张Powerline 效果图，然后看看我是怎么做的吧。</p>
<hr>
<h4 id="第一步：安装Python-2-X"><a href="#第一步：安装Python-2-X" class="headerlink" title="第一步：安装Python 2.X"></a>第一步：安装Python 2.X</h4><p>因为 Powerline 是用 Python 写的脚本，所以我们必须确保在安装 Powerline 我们的 Mac 里面已经安装了  Python（一般来说 Mac 会自带 Python 2.X）我们可以在终端里面输入下面的代码来检查 Python 版本，若此命令没有返回任何讯息说明你的 Mac 里面没有安装 Python。</p>
<p><code>python -V </code></p>
<p>你可以通过 <strong>Homebrew (brew)</strong> 在终端里面安装Python，在终端输入下面的代码（若你的终端里面没有安装 brew, 点此链接：<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a> ）<br><code>brew install python</code></p>
<h4 id="第二步：下载Powerline"><a href="#第二步：下载Powerline" class="headerlink" title="第二步：下载Powerline"></a>第二步：下载Powerline</h4><p>安装 Powerline 的方法有很多种，我们可以通过 pip 或者 git 等工具，<strong>我推荐使用 pip 并且将其安装在根目录下 （也就是 /usr/ 目录中）</strong><br>需要注意的是在安装之前我们要检查是否自己已经安装过了 Powerline （我就是那种有时候自己都不知道在电脑里装了什么的人）我们可以使用命令：</p>
<p><code>pip show powerline-status</code></p>
<p>如果没安装的话就不会弹出任何相关的讯息，倘若已经安装好了，会出现类似于下面的软件描述讯息：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-593e328f07c6ebf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Powerline 描述讯息"><br></div>

<p>当然，如果你已经安装了，却无法使用或者激活建议使用下面的命令来删除已安装的 Powerline：（<strong>P.S.</strong> 删除之后记得再用 <code><strong>pip show powerline-status</strong></code> 检查一下是否成功删除了或者还有没有残留的其他版本。）</p>
<p><code>pip uninstall powerline-status</code></p>
<p>在确认删除后，用下面的命令会将 Powerline 安装在<strong>根目录</strong>里面:</p>
<p><code>sudo pip install powerline-status</code></p>
<p>通过 <code>pip show powerline-status</code> 命令，我们可以查到 Powerline 的安装路径(Location) 在 <code><strong>/usr/local/lib/python2.7/site-packages </strong></code> 里，<strong>这个地址非常重要，因为在配置 Poweline 到终端和 vim 的时候还会用到</strong>。<br><br></p>
<h4 id="第三步：配置-Powerline-到终端"><a href="#第三步：配置-Powerline-到终端" class="headerlink" title="第三步：配置 Powerline 到终端"></a>第三步：配置 Powerline 到终端</h4><p>在安装完 Powerline 之后，Powerline 不会马上出现在终端里，因此我们需要把 Powerline 激活。通过下面两部两步来把 Powerline 配置到自己的终端里:<br><strong>一确认 Powerline 的安装路径</strong>（上图的 Location 后面的路径就是你 Powerline 的安装路径）<br><strong>二 配置 .bash_profile 文件</strong>（mac 默认的配置文件）让终端每次启动的时候自动运行 Powerline 脚本，只需将下面的句子复制到你的 bash_profile 文件里就可以啦：<br><code>. /Powerline安装路径/powerline/bindings/bash/powerline.sh</code><br>需要注意的是最开始的 ‘.’ 和 ‘/powerline/…’ 中间是以空格分开的。还有就是大家的安装路径跟我的可能不一样，所以一定要通过 <code>pip show powerline-status</code> 来确认好自己电脑上 Powerline 的安装路径。<br><br>还有一点要注意的是你可能会在 .profile 或者 .bashrc 文件中配置 Powerline，但是却无法激活它。这可能是因为你的电脑中同时也存在 .bash_profile 文件。Unix 终端会将 .bash_profile 文件作为默认配置文件而不是 .bashrc 或 .profile（我就中招了）。<br><br>在配置完成后，需要重启一下终端，或者在终端里面使用 <code>source .bash_profile</code> 重载。就可以看到酷炫屌炸天的 Powerline 终端界面啦：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-20ef0157329eb98f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Powerline 效果图2 － 未使用powerline专用字体"><br></div>

<p>咦，我的终端怎么这样，怎么这么多小问号？别担心，<strong>这是因为我们还没有 <a href="https://github.com/powerline/fonts" target="_blank" rel="external">安装 Powerline Font</a> － 专用于 Powerline 主题的字体</strong>。现在点开链接，按步骤安装好 Powerline font 然后在终端设置里把字体设置为以 <strong>Powerline</strong> 结尾的字体就行了：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1816409-51e33ae16a773578.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Powerline font example"><br></div>

<h3 id="第四步：配置-Powerline-到-Vim"><a href="#第四步：配置-Powerline-到-Vim" class="headerlink" title="第四步：配置 Powerline 到 Vim"></a>第四步：配置 Powerline 到 Vim</h3><p>只需要在vim 的配置文件 .vimrc 里面加上以下语句，再重启一下终端就可以啦～</p>
<pre>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh</div><div class="line"></div><div class="line">set nocompatible</div><div class="line">set t_Co=256</div><div class="line"></div><div class="line">let g:minBufExplForceSyntaxEnable = 1</div><div class="line">python from powerline.vim import setup as powerline_setup</div><div class="line">python powerline_setup()</div><div class="line">python del powerline_setup</div><div class="line"></div><div class="line">set laststatus=2</div><div class="line">set guifont=Source\ Code\ Pro\ for\ Powerline:h12</div><div class="line">set noshowmode</div></pre></td></tr></table></figure>
<p></p></pre><br>如果你在终端文件中找不到   .vimrc 或者.bash_profile 就自己创建一个吧，记得要保存在home 目录里面，也就是 /User/你的用户名目录 下面。<br><p></p>
<h4 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h4><p>如果你不太理解 .bash_profile 或者 .bashrc 之类的配置文件的原理，可以参考这篇文章：<a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html" target="_blank" rel="external">.bash_profile vs .bashrc</a> 再附上 <a href="http://powerline.readthedocs.org/en/master/installation/osx.html" target="_blank" rel="external">Powerline OS X 官方安装教程</a> 供参考。Good luck</p>
]]></content>
      
        <categories>
            
            <category> Unix/Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Powerline </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
